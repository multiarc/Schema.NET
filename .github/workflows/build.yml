name: Build

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - published
  workflow_dispatch:

env:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Disable the .NET first time experience to skip caching NuGet packages and speed up the build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending .NET CLI telemetry to Microsoft.
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Set the build number in MinVer.
  MINVERBUILDMETADATA: build.${{github.run_number}}

jobs:
  build:
    name: Build-${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4.2.2
        with:
          lfs: true
          fetch-depth: 0
      - name: "Install .NET 6.0 SDK"
        uses: actions/setup-dotnet@v4.2.0
        with:
          dotnet-version: 6.0.x
      - name: "Install .NET 8.0 SDK"
        uses: actions/setup-dotnet@v4.2.0
        with:
          dotnet-version: 8.0.x
      - name: "Install Mono runtime"
        if: matrix.os == 'ubuntu-latest'
        run: sudo sh ./.github/scripts/install-mono-devel.sh
        shell: sh
      - name: "Dotnet Restore"
        run: dotnet restore
      - name: "Dotnet Build"
        run: dotnet build -c Release --no-restore && dotnet build -c Debug --no-restore
      - name: "Dotnet Test"
        run: dotnet test -c Debug --collect:"XPlat Code Coverage" --logger trx --no-restore --no-build --results-directory ./Artefacts -- RunConfiguration.DisableAppDomain=true
      - name: "Dotnet Pack"
        run: dotnet pack -c Release --no-build --no-restore --include-source --include-symbols -o ./Artefacts
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.18.0
        with:
          files: "./Artefacts/**/*.trx"
      - name: cobertura-report
        uses: 5monkeys/cobertura-action@v14
        with:
            path: "./Artefacts/*/coverage.cobertura.xml"

  publish-test-results:
    name: "Publish Tests Results"
    needs: build
    if: always()
    permissions:
      checks: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: "Download Artefact"
        uses: actions/download-artifact@v4.1.8
        with:
          path: "./Artefacts"
      - name: "Publish Test Summary"
        uses: test-summary/action@v2.4
        if: always()
        with:
          paths: "./Artefacts/*/*.xml"

  push-github-packages:
    name: "Push GitHub Packages"
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: "GitHub Packages"
      url: https://github.com/multiarc/Schema.NET/packages
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: "Download Artefact"
        uses: actions/download-artifact@v4.1.8
        with:
          name: "windows-latest"
      - name: "Dotnet NuGet Add Source"
        run: dotnet nuget update source https://nuget.pkg.github.com/multiarc/index.json --name GitHub --username multiarc --password ${{secrets.GITHUB_TOKEN}}
        shell: pwsh
      - name: "Dotnet NuGet Push"
        run: dotnet nuget push .\*.nupkg --api-key ${{ github.token }} --source GitHub --skip-duplicate
        shell: pwsh